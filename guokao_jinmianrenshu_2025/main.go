package main

import (
	"dataclearing/conf"
	"encoding/json"
	"github.com/360EntSecGroup-Skylar/excelize"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"strconv"
	"time"
)

type AutoGenerated struct {
	Title string `json:"title"`
	List  []List `json:"list"`
}
type List struct {
	Time          int    `json:"time"`
	Title         string `json:"title"`
	Baomingrenshu int64  `json:"baomingrenshu"`
	Guoshenrenshu int64  `json:"guoshenrenshu"`
	Daishenrenshu int64  `json:"daishenrenshu"`
}

func main() {
	db, err := gorm.Open(mysql.Open(conf.DSNL), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		panic("failed to connect database")
	}

	f, err := excelize.OpenFile("./guokao_jinmianrenshu_2025/2025国考报名数据.xlsx")
	if err != nil {
		panic(err)
		return
	}
	rows := f.GetRows("最终报名数据")
	for idx, row := range rows {
		if idx < 1 {
			continue
		}
		//var data AutoGenerated
		//data.Title = "报名数据"
		//data.List = []List{
		//	{
		//		Time:          20241024,
		//		Title:         "10月24日（12点）",
		//		Baomingrenshu: str2int(row[5]),
		//		Daishenrenshu: str2int(row[6]),
		//		Guoshenrenshu: str2int(row[7]),
		//	},
		//}
		//fmt.Printf("%#v\n", data)
		//G(db, row[2], row[0], "2025", data)
		GG(db, row[2], row[0], "2025", row[7])
	}

}

func str2int(n string) int64 {
	//
	if n == "" {
		return 0
	}
	i, _ := strconv.ParseInt(n, 10, 64)
	return i
}

type TbGuokao struct {
	ID                       int64          `gorm:"primaryKey;autoIncrement;column:id" json:"id"`                        // 主键
	JobCodeBase              string         `gorm:"column:job_code_base" json:"job_code_base"`                           // 部门代码
	UnitName                 string         `gorm:"column:unit_name" json:"unit_name"`                                   // 部门名称
	EmployDepartment         string         `gorm:"column:employ_department" json:"employ_department"`                   // 用人司局
	InstitutionalNatural     string         `gorm:"column:instituonal_natural" json:"institutional_natural"`             // 机构与性质
	JobName                  string         `gorm:"column:job_name" json:"job_name"`                                     // 招考职位
	JobCategory              string         `gorm:"column:job_category" json:"job_category"`                             // 职位属性
	JobDistribute            string         `gorm:"column:job_distribute" json:"job_distribute"`                         // 职位分布
	JobDescription           string         `gorm:"column:job_description" json:"job_description"`                       // 职位简介
	JobCode                  string         `gorm:"column:job_code" json:"job_code"`                                     // 职位代码
	JobLevel                 string         `gorm:"column:job_level" json:"job_level"`                                   // 机构层级
	ExamType                 string         `gorm:"column:exam_type" json:"exam_type"`                                   // 考试类别
	Count                    string         `gorm:"column:count" json:"count"`                                           // 招考人数
	ProfessionalRequire      string         `gorm:"column:professional_require" json:"professional_require"`             // 专业要求
	EducationalRequire       string         `gorm:"column:educational_require" json:"educational_require"`               // 学历要求
	DegreeRequire            string         `gorm:"column:degree_require" json:"degree_require"`                         // 学位要求
	PoliticalStatus          string         `gorm:"column:political_status" json:"political_status"`                     // 政治面貌
	GrassrootsExperienceYear string         `gorm:"column:grassroots_experience_year" json:"grassroots_experience_year"` // 基层最低工作年限
	ServeExperienceYear      string         `gorm:"column:serve_experience_year" json:"serve_experience_year"`           // 服务基层项目工作经历
	ProfessionalAbilityTest  string         `gorm:"column:professional_ability_test" json:"professional_ability_test"`   // 是否在面试阶段组织专业能力测试
	InterviewRatio           string         `gorm:"column:interview_ratio" json:"interview_ratio"`                       // 面试人员比例
	WorkSpace                string         `gorm:"column:work_space" json:"work_space"`                                 // 工作地点
	SettledSpace             string         `gorm:"column:settled_apace" json:"settled_space"`                           // 落户地点
	Remark                   string         `gorm:"column:remark" json:"remark"`                                         // 备注
	Website                  string         `gorm:"column:website" json:"website"`                                       // 部门网站
	EnquiryTel               string         `gorm:"column:enquirty_tel" json:"enquiry_tel"`                              // 咨询电话
	V2SubmitNum              string         `gorm:"column:v2_submit_num" json:"v2_submit_num"`                           // 最终过审人数
	V2MinScore               string         `gorm:"column:v2_min_score" json:"v2_min_score"`                             // 最低进面分
	V3SubmitInfo             string         `gorm:"column:v3_submit_info" json:"v3_submit_info"`                         // 历史报名人数
	V3Ext                    string         `gorm:"column:v3_ext" json:"v3_ext"`                                         // 拓展字段
	CreatedAt                time.Time      `gorm:"column:created_at" json:"created_at"`                                 // 创建时间
	UpdatedAt                time.Time      `gorm:"column:updated_at" json:"updated_at"`                                 // 最后更新时间
	DeletedAt                gorm.DeletedAt `gorm:"column:deleted_at" json:"deleted_at"`                                 // 删除时间
	CreateBy                 int64          `gorm:"column:create_by" json:"create_by"`                                   // 创建者
	UpdateBy                 int64          `gorm:"column:update_by" json:"update_by"`                                   // 更新者
	Year                     string         `gorm:"column:year" json:"year"`                                             // 年份
}

func (TbGuokao) TableName() string {
	return "tb_guokao"
}

func G(db *gorm.DB, jobCodeBase, jobCode, year string, data AutoGenerated) {
	var guo TbGuokao
	res := db.Model(&TbGuokao{}).
		Where("job_code_base = ? and job_code = ? and year = ?", jobCodeBase, jobCode, year).
		First(&guo)
	if res.Error == nil {
		if guo.V3SubmitInfo == "" {
			marshal, err1 := json.Marshal(data)
			if err1 == nil {
				guo.V3SubmitInfo = string(marshal)
			} else {
				return
			}
		} else {
			var data1 AutoGenerated
			// 本来就有数据
			err2 := json.Unmarshal([]byte(guo.V3SubmitInfo), &data1)
			if err2 != nil {
				//依旧
				marshal, err1 := json.Marshal(data)
				if err1 == nil {
					guo.V3SubmitInfo = string(marshal)
				} else {
					return
				}
			} else {
				for _, ida := range data1.List {
					if ida.Time == data.List[0].Time {
						return
					}
				}
				data1.List = append(data1.List, data.List...)
				marshal, err1 := json.Marshal(data1)
				if err1 == nil {
					guo.V3SubmitInfo = string(marshal)
				} else {
					return
				}
			}

		}
		db.Model(&TbGuokao{}).
			Where("job_code_base = ? and job_code = ? and year = ?", jobCodeBase, jobCode, year).
			Update("v3_submit_info", guo.V3SubmitInfo)

	}
}

func GG(db *gorm.DB, jobCodeBase, jobCode, year string, V2SubmitNum string) {
	db.Model(&TbGuokao{}).
		Where("job_code_base = ? and job_code = ? and year = ?", jobCodeBase, jobCode, year).
		Update("v2_submit_num", V2SubmitNum)
}
